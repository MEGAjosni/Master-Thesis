u: ResNet(
  (input_layer): Linear(in_features=2, out_features=20, bias=True)
  (res_blocks): Sequential(
    (0): ResNetBlock(
      (layers): ModuleList(
        (0): Linear(in_features=20, out_features=20, bias=True)
        (1): Tanh()
        (2): Linear(in_features=20, out_features=20, bias=True)
        (3): Tanh()
      )
    )
    (1): ResNetBlock(
      (layers): ModuleList(
        (0): Linear(in_features=20, out_features=20, bias=True)
        (1): Tanh()
        (2): Linear(in_features=20, out_features=20, bias=True)
        (3): Tanh()
      )
    )
    (2): ResNetBlock(
      (layers): ModuleList(
        (0): Linear(in_features=20, out_features=20, bias=True)
        (1): Tanh()
        (2): Linear(in_features=20, out_features=20, bias=True)
        (3): Tanh()
      )
    )
    (3): ResNetBlock(
      (layers): ModuleList(
        (0): Linear(in_features=20, out_features=20, bias=True)
        (1): Tanh()
        (2): Linear(in_features=20, out_features=20, bias=True)
        (3): Tanh()
      )
    )
    (4): ResNetBlock(
      (layers): ModuleList(
        (0): Linear(in_features=20, out_features=20, bias=True)
        (1): Tanh()
        (2): Linear(in_features=20, out_features=20, bias=True)
        (3): Tanh()
      )
    )
  )
  (output_layer): Linear(in_features=20, out_features=1, bias=True)
  (activation): Tanh()
)
N: SparseBurger()
F: MultKAN(
  (act_fun): ModuleList(
    (0-1): 2 x KANLayer(
      (base_fun): SiLU()
    )
  )
  (base_fun): SiLU()
  (symbolic_fun): ModuleList(
    (0-1): 2 x Symbolic_KANLayer()
  )
)